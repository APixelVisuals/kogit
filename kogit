#!/bin/bash

# Make config directory
if [ ! -d ~/.config/kogit/ ]; then

    mkdir -p ~/.config/kogit/

fi

# Set token
if [ "$1" == "-t" ] || [ "$1" == "--token" ]; then

    echo "$2" > ~/.config/kogit/access-token
    echo "Your GitHub access token has been set"
    exit

fi

# No access token
if [ ! -f ~/.config/kogit/access-token ]; then

    echo "You don't have a GitHub access token set. You can set one by using \`kogit -t ACCESS_TOKEN\`"
    exit

fi

# Clear screen
clear

# Read config files
ACCESS_TOKEN=$(cat ~/.config/kogit/access-token)

# Make requests
RESULT=$(curl -sH "Authorization: token $ACCESS_TOKEN" https://api.github.com/repos/$1)

# Define vars
ID=$(echo "$RESULT" | jq -r ".id")
FULL_NAME=$(echo "$RESULT" | jq -r ".full_name")
DESCRIPTION=$(echo "$RESULT" | jq -r ".description")
WEBSITE=$(echo "$RESULT" | jq -r ".homepage")
STARS=$(echo "$RESULT" | jq -r ".stargazers_count")
WATCHERS=$(echo "$RESULT" | jq -r ".watchers_count")
PRIMARY_LANGUAGE=$(echo "$RESULT" | jq -r ".language")
PRIVATE=$(echo "$RESULT" | jq -r ".private")

# Define no color var + formatting function
NC='\033[0m'
case $PRIMARY_LANGUAGE in

    # Red
    "HTML") COLOR='\033[0;31m';;

    # Yellow
    "Java") COLOR='\033[0;33m';;

    # Blue
    "CSS" | "TypeScript" | "Python" | "C++") COLOR='\033[0;34m';;

    # Magenta
    "C#" | "TypeScript") COLOR='\033[0;35m';;

    # Light Gray
    "C") COLOR='\033[0;37m';;

    # Bright yellow
    "JavaScript") COLOR='\033[0;93m';;

    # Other (bright yellow)
    *) COLOR='\033[0;93m';;

esac

# Title
BORDER_LENGTH=$((${#FULL_NAME} + ${#ID} + 7))
SPACES_LENGTH=$(( ($(tput cols) / 2) - ($BORDER_LENGTH / 2) ))
BORDER=""
SPACES=""
for i in $(seq 1 $BORDER_LENGTH); do BORDER="$BORDER="; done
for i in $(seq 1 $SPACES_LENGTH); do SPACES="$SPACES "; done

echo "$SPACES$BORDER"
echo -e "$SPACES  ${COLOR}$FULL_NAME ($ID)${NC}"
echo "$SPACES$BORDER"

# Description
DESCRIPTION_LINES_COUNT=$(( ${#DESCRIPTION} / $(tput cols) ))

if (( ${#DESCRIPTION} >= $(tput cols) )); then DESCRIPTION_FIRST_LINES=$(echo $DESCRIPTION | cut -c -$(( ${DESCRIPTION_LINES_COUNT%.*} * $(tput cols) ))); fi
DESCRIPTION_LAST_LINE=$(echo $DESCRIPTION | cut -c $(( (${DESCRIPTION_LINES_COUNT%.*} * $(tput cols)) + 1 ))-)

SPACES_LENGTH=$(( ($(tput cols) / 2) - (${#DESCRIPTION_LAST_LINE} / 2) ))
SPACES=""
for i in $(seq 1 $SPACES_LENGTH); do SPACES="$SPACES "; done

echo
if (( ${#DESCRIPTION} >= $(tput cols) )); then echo "$DESCRIPTION_FIRST_LINES"; fi
echo "$SPACES$DESCRIPTION_LAST_LINE"
echo; echo

# Stars + watchers
STARS_WATCHERS="Stars: $STARS     Watchers: $WATCHERS"
STARS_WATCHERS_SPACES=""
for i in $(seq 1 $(( ($(tput cols) / 2) - (${#STARS_WATCHERS} / 2) ))); do STARS_WATCHERS_SPACES="$STARS_WATCHERS_SPACES "; done
echo -e "$STARS_WATCHERS_SPACES${COLOR}Stars:${NC} $STARS     ${COLOR}Watchers:${NC} $WATCHERS"

# Primary Language
SPACES_LENGTH=$(( ($(tput cols) / 2) - (${#PRIMARY_LANGUAGE} / 2) ))
SPACES=""
for i in $(seq 1 $SPACES_LENGTH); do SPACES="$SPACES "; done

echo
echo -e "$SPACES${COLOR}$PRIMARY_LANGUAGE${NC}"